import logging
import sqlite3
import tempfile
import datetime
import os

from aiogram import Bot, Dispatcher, types, executor
from moviepy.editor import VideoFileClip
from io import BytesIO, FileIO

import aiogram.utils.exceptions
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage

class BroadcastState(StatesGroup):
    WaitingForAdminMessage = State()

API_TOKEN = ""  # @BotFather token bot
CHANNEL_ID = -1002120834518 # channel id
CHANNEL_LINK = "https://t.me/+_IQt3BVSW_o5Yjhk"  # –ª–∏–Ω–∫ –Ω–∞ –∫–∞–Ω–∞–ª

# -------------------
ADMIN_ID = 1132917616  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# -------------------

conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        join_date TEXT,
        message_id INTEGER
    )
''')
conn.commit()

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç MemoryStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

async def start(message: types.Message):
    user = message.from_user
    user_in_channel = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user.id)

    if user_in_channel.status == 'member' or user_in_channel.status == 'administrator':
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, join_date) VALUES (?, ?, ?, ?, ?)",
                       (user.id, user.username, user.first_name, user.last_name, datetime.datetime.now()))
        conn.commit()
        await message.answer("<b>–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç</b>", parse_mode='HTML')
    else:
        keyboard = types.InlineKeyboardMarkup()
        channel_link_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)
        check_subscription_button = types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_subscription")
        keyboard.add(channel_link_button)
        keyboard.add(check_subscription_button)

        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª https://t.me/+_IQt3BVSW_o5Yjhk, –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.", reply_markup=keyboard, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def count_users():
    cursor.execute("SELECT COUNT(user_id) FROM users")
    result = cursor.fetchone()
    if result:
        return result[0]
    return 0

# –§—É–Ω–∫—Ü–∏—è admin_command
async def admin_command(message: types.Message):
    user = message.from_user
    if user.id == ADMIN_ID:
        total_users = await count_users()

        keyboard = types.InlineKeyboardMarkup()
        broadcast_button = types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")
        export_button = types.InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å", callback_data="export_data")
        keyboard.add(broadcast_button, export_button)
        
        await message.answer(f"–í—Å–µ–≥–æ –ª—é–¥–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {total_users}", reply_markup=keyboard)
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

async def process_video(message: types.Message):
    user = message.from_user
    user_in_channel = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user.id)

    if user_in_channel.status != 'member' and user_in_channel.status != 'administrator':
        await message.answer("‚ÄºÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª https://t.me/+_IQt3BVSW_o5Yjhk, –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.", parse_mode='HTML')
        return

    video_file_id = message.video.file_id
    wait_message = await message.answer("<b>–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä—É–∂–∫–∞ ‚è≥</b>", parse_mode='HTML')

    video_data = BytesIO()
    await message.bot.download_file_by_id(video_file_id, video_data)
    video_data.seek(0)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_video_file:
        temp_video_file.write(video_data.read())

    input_video = VideoFileClip(temp_video_file.name)
    w, h = input_video.size
    circle_size = 360
    aspect_ratio = float(w) / float(h)

    if w > h:
        new_w = int(circle_size * aspect_ratio)
        new_h = circle_size
    else:
        new_w = circle_size
        new_h = int(circle_size / aspect_ratio)

    resized_video = input_video.resize((new_w, new_h))
    output_video = resized_video.crop(x_center=resized_video.w / 2, y_center=resized_video.h / 2, width=circle_size,
                                       height=circle_size)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_output_file:
        output_video.write_videofile(temp_output_file.name, codec="libx264", audio_codec="aac")
        temp_output_file.seek(0)
        output_data = FileIO(temp_output_file.name)

    await message.bot.send_video_note(chat_id=message.chat.id, video_note=output_data, duration=int(output_video.duration),
                                      length=circle_size)

    await wait_message.delete()

    keyboard = types.InlineKeyboardMarkup()
    hide_message_button = types.InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="hide_message")
    keyboard.add(hide_message_button)
    await message.answer("<b>–í–æ—Ç —Ç–≤–æ–π –∫—Ä—É–∂–æ–∫ ‚§¥Ô∏è</b>", reply_markup=keyboard, parse_mode='HTML')


@dp.callback_query_handler(lambda callback_query: callback_query.data == "check_subscription")
async def check_subscription(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    user_in_channel = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user.id)

    if user_in_channel.status == 'member' or user_in_channel.status == 'administrator':
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, join_date) VALUES (?, ?, ?, ?, ?)",
                       (user.id, user.username, user.first_name, user.last_name, datetime.datetime.now()))
        conn.commit()
        await callback_query.answer("‚úÖ")

        try:
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass

        await bot.send_message(user.id,
                               "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫.\n\n<b>–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ì–°, –µ—Å–ª–∏ –≤—ã –∏—Ö –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏</b>",
                               parse_mode='HTML')
    else:
        await callback_query.answer("‚ÄºÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)

@dp.callback_query_handler(lambda callback_query: callback_query.data == "hide_message")
async def hide_message(callback_query: types.CallbackQuery):
    await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ")

    try:
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageToDeleteNotFound:
        pass

@dp.callback_query_handler(lambda callback_query: callback_query.data == "export_data")
async def export_data(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT user_id, username, first_name, last_name, join_date FROM users")
    data = cursor.fetchall()

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    with open("file.txt", "w", encoding="utf-8") as file:
        for row in data:
            file.write(" : ".join(map(str, row)) + "\n")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open("file.txt", "rb") as file:
        await bot.send_document(callback_query.from_user.id, file)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove("file.txt")

    await callback_query.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ —Ñ–∞–π–ª.")

@dp.callback_query_handler(lambda callback_query: callback_query.data == "broadcast")
async def start_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    await BroadcastState.WaitingForAdminMessage.set()
    await bot.send_message(callback_query.from_user.id, "ü´¥–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–í–∏–¥–µ–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å—Ç–∏–∫–µ—Ä—ã)")


@dp.message_handler(state=BroadcastState.WaitingForAdminMessage, content_types=types.ContentType.ANY)
async def process_admin_message(message: types.Message, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    admin_message_text = message.text or ''

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user_id in users:
        try:
            await bot.send_message(user_id[0], admin_message_text, parse_mode='HTML')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    if message.photo:
        for user_id in users:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –≤–∏–¥–µ –ø–æ–¥–ø–∏—Å–∏
                await bot.send_photo(user_id[0], photo=message.photo[-1].file_id, caption=f"{admin_message_text}\n\n{message.caption}" if message.caption else None, parse_mode='HTML')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    if message.video:
        for user_id in users:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –≤–∏–¥–µ –ø–æ–¥–ø–∏—Å–∏
                await bot.send_video(user_id[0], video=message.video.file_id, caption=f"{admin_message_text}\n\n{message.caption}" if message.caption else None, parse_mode='HTML')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    if message.sticker:
        for user_id in users:
            try:
                await bot.send_sticker(user_id[0], sticker=message.sticker.file_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}")

    await bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", parse_mode='HTML')

dp.register_message_handler(start, commands=["start"])
dp.register_message_handler(process_video, content_types=types.ContentType.VIDEO)
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /admin
dp.register_message_handler(admin_command, commands=["admin"])

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
